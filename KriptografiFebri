def vigenere_encrypt(plaintext, key):
    ciphertext = ''
    key = key.upper()
    key_len = len(key)
    for i, char in enumerate(plaintext):
        if char.isalpha():
            shift = ord(key[i % key_len]) - ord('A')
            encrypted_char = chr((ord(char.upper()) - ord('A') + shift) % 26 + ord('A'))
            ciphertext += encrypted_char
        else:
            ciphertext += char
    return ciphertext

def vigenere_decrypt(ciphertext, key):
    plaintext = ''
    key = key.upper()
    key_len = len(key)
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            shift = ord(key[i % key_len]) - ord('A')
            decrypted_char = chr((ord(char.upper()) - ord('A') - shift + 26) % 26 + ord('A'))
            plaintext += decrypted_char
        else:
            plaintext += char
    return plaintext

def create_playfair_matrix(key):
    key = key.upper().replace("J", "I")
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix = []
    for char in key:
        if char not in matrix and char in alphabet:
            matrix.append(char)
    for char in alphabet:
        if char not in matrix:
            matrix.append(char)
    return [matrix[i:i + 5] for i in range(0, 25, 5)]

def playfair_encrypt(plaintext, key):
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")
    matrix = create_playfair_matrix(key)
    ciphertext = ""

    def get_position(char):
        for i, row in enumerate(matrix):
            if char in row:
                return i, row.index(char)

    def process_pair(pair):
        row1, col1 = get_position(pair[0])
        row2, col2 = get_position(pair[1])
        if row1 == row2:
            return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
        else:
            return matrix[row1][col2] + matrix[row2][col1]

    i = 0
    while i < len(plaintext):
        char1 = plaintext[i]
        char2 = plaintext[i + 1] if i + 1 < len(plaintext) else 'X'
        if char1 == char2:
            char2 = 'X'
        ciphertext += process_pair(char1 + char2)
        i += 2
    return ciphertext

def playfair_decrypt(ciphertext, key):
    matrix = create_playfair_matrix(key)
    plaintext = ""

    def get_position(char):
        for i, row in enumerate(matrix):
            if char in row:
                return i, row.index(char)

    def process_pair(pair):
        row1, col1 = get_position(pair[0])
        row2, col2 = get_position(pair[1])
        if row1 == row2:
            return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
        else:
            return matrix[row1][col2] + matrix[row2][col1]

    i = 0
    while i < len(ciphertext):
        char1 = ciphertext[i]
        char2 = ciphertext[i + 1]
        plaintext += process_pair(char1 + char2)
        i += 2
    return plaintext

def hill_encrypt(plaintext, key_matrix):
    plaintext = plaintext.upper().replace(" ", "")
    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        vector = [ord(plaintext[i]) - ord('A'), ord(plaintext[i + 1]) - ord('A')]
        encrypted_vector = [
            (key_matrix[0][0] * vector[0] + key_matrix[0][1] * vector[1]) % 26,
            (key_matrix[1][0] * vector[0] + key_matrix[1][1] * vector[1]) % 26
        ]
        ciphertext += chr(encrypted_vector[0] + ord('A')) + chr(encrypted_vector[1] + ord('A'))
    return ciphertext

def hill_decrypt(ciphertext, key_matrix_inv):
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        vector = [ord(ciphertext[i]) - ord('A'), ord(ciphertext[i + 1]) - ord('A')]
        decrypted_vector = [
            (key_matrix_inv[0][0] * vector[0] + key_matrix_inv[0][1] * vector[1]) % 26,
            (key_matrix_inv[1][0] * vector[0] + key_matrix_inv[1][1] * vector[1]) % 26
        ]
        plaintext += chr(decrypted_vector[0] + ord('A')) + chr(decrypted_vector[1] + ord('A'))
    return plaintext

key_matrix = [[3, 3], [2, 5]]
key_matrix_inv = [[15, 17], [20, 9]]
def main():
    while True:
        print("=== Program Kriptografi ===")
        print("1. Vigenere Cipher")
        print("2. Playfair Cipher")
        print("3. Hill Cipher")
        print("4. Keluar")
        choice = input("Pilih cipher: ")

        if choice == '1':
            message = input("Masukkan pesan: ")
            key = input("Masukkan kunci (min 12 karakter): ")
            mode = input("Pilih mode (1: Enkripsi, 2: Dekripsi): ")
            if mode == '1':
                print("Hasil Enkripsi:", vigenere_encrypt(message, key))
            else:
                print("Hasil Dekripsi:", vigenere_decrypt(message, key))

        elif choice == '2':
            message = input("Masukkan pesan: ")
            key = input("Masukkan kunci (min 12 karakter): ")
            mode = input("Pilih mode (1: Enkripsi, 2: Dekripsi): ")
            if mode == '1':
                print("Hasil Enkripsi:", playfair_encrypt(message, key))
            else:
                print("Hasil Dekripsi:", playfair_decrypt(message, key))

        elif choice == '3':
            message = input("Masukkan pesan (panjang genap): ")
            mode = input("Pilih mode (1: Enkripsi, 2: Dekripsi): ")
            if mode == '1':
                print("Hasil Enkripsi:", hill_encrypt(message, key_matrix))
            else:
                print("Hasil Dekripsi:", hill_decrypt(message, key_matrix_inv))

        elif choice == '4':
            break

        else:
            print("Pilihan tidak valid, coba lagi.")

if __name__ == "__main__":
    main()
